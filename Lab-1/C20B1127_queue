//CS20B1127
//Hitesh Gupta
//Program to implement queue.
//Queue Header File.

#include<iostream>
using namespace std;
#define SIZE 5

//Class to implement queue ADT
class queue
{
    private:
        int front;
        int rear;
        int arr[SIZE];
    public:    
        void enqueue(int);//Declaration of enqueue function.
        int dequeue();//Declaration of dequeue function.
        
        //Function to display all the elements in the queue.
        void display()
        {
            if(isEmpty())
            {
                cout << " The queue is empty." << endl;
            }
            else
            {
                for(int i = front; i <= rear; i++)
                {
                    cout << arr[i] << " " ;
                }
            }
        }
        
        //Function to display the front of the queue.
        int peek()
        {
            if(isEmpty())
            {
                return -1;
            }
            return arr[front]; 
        }
        
        //Boolean function to check whether the queue is full or not.
        bool isFull()
        {
            if(front == 0 && rear == SIZE-1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        
        //Boolean function to check whether the queue is empty or not.
        bool isEmpty()
        {
            if(front == -1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        
        //Constructor for initialising the queue.
        queue()
        {
            front = -1;
            rear = -1;
        }
};

//Function to enqueue an element into the queue.
void queue::enqueue(int num)
{
    if(isFull())
    {
        cout << "\n Cannot insert! The queue is full!" << endl;
    }
    else 
    {
        if(isEmpty())
            front = 0;
        
        rear++;
        arr[rear] = num;
    }
}

//Function to dequeue an element from the queue.
int queue::dequeue()
{
    if(isEmpty())
    {
        return -1;
    }
    else
    {
        int temp = arr[front];
    
        if(front >= rear)
        {
            front = -1;
            rear = -1;
        }
        else
        {
            front++;
        }
        
        return temp;
    }
}